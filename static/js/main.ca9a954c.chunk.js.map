{"version":3,"sources":["components/PageNavLink/PageNavLink.tsx","components/Navbar/Navbar.tsx","pages/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","cn","Navbar","role","HomePage","getPeople","fetch","response","ok","Error","json","Loader","PersonLink","person","selectedPerson","name","sex","born","died","motherName","fatherName","slug","mother","father","isSelected","useMemo","personSlug","PeopleTable","people","map","NoPeople","PeoplePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","useParams","getPeopleFromServer","peopleFromServer","message","useEffect","findParent","parentName","find","modifiedPeople","length","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ca9a954c.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: React.FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => cn('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })}\n  >\n    {text}\n  </NavLink>\n);\n","import { PageNavLink } from '../PageNavLink';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n\n          <PageNavLink to=\"/\" text=\"Home\" />\n          <PageNavLink to=\"people\" text=\"People\" />\n\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async (): Promise<Person[]> => {\n  let response;\n\n  try {\n    response = await fetch(BASE_URL);\n\n    if (!response.ok) {\n      throw new Error('Error Loading');\n    }\n  } catch (error) {\n    throw new Error('Error Loading');\n  }\n\n  return response.json();\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useMemo } from 'react';\n\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n  selectedPerson: string;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, selectedPerson }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    slug,\n    mother,\n    father,\n  } = person;\n\n  const isSelected = useMemo(() => (\n    (personSlug: string) => personSlug === selectedPerson\n  ), [selectedPerson]);\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': isSelected(slug),\n      })}\n    >\n      <td>\n        <Link\n          to={`../${slug}`}\n          className={cn({\n            'has-text-danger': sex === 'f',\n          })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother\n          ? (\n            <Link\n              to={`../${mother.slug}`}\n              className=\"has-text-danger\"\n            >\n              {motherName}\n            </Link>\n          )\n          : <span>{motherName || '-'}</span>}\n      </td>\n      <td>\n        {father\n          ? (\n            <Link to={`../${father.slug}`}>\n              {fatherName}\n            </Link>\n          )\n          : <span>{fatherName || '-'}</span>}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { PersonLink } from '../PersonLink';\n\nimport { Person } from '../../types';\n\ntype Props = {\n  people: Person[];\n  selectedPerson: string;\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, selectedPerson }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonLink\n            key={person.slug}\n            person={person}\n            selectedPerson={selectedPerson}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import {\n  useState,\n  useEffect,\n  useMemo,\n} from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport { getPeople } from '../api';\nimport { Person } from '../types/Person';\n\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\n\nconst NoPeople = () => (\n  <p data-cy=\"noPeopleMessage\">\n    There are no people on the server\n  </p>\n);\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const { slug = '' } = useParams();\n\n  const getPeopleFromServer = async () => {\n    try {\n      setIsLoading(true);\n      const peopleFromServer = await getPeople();\n\n      setPeople(peopleFromServer);\n    } catch (error: any) {\n      setErrorMessage('Something went wrong');\n      throw new Error(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getPeopleFromServer();\n  }, []);\n\n  const findParent = useMemo(() => (\n    (parentName: string | null): Person | null => {\n      return people.find(person => person.name === parentName) || null;\n    }\n  ), [people]);\n\n  const getFullPersonInfo = () => {\n    return people.map(person => ({\n      ...person,\n      mother: findParent(person.motherName),\n      father: findParent(person.fatherName),\n    }));\n  };\n\n  const modifiedPeople = useMemo(() => (\n    getFullPersonInfo()\n  ), [people]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {errorMessage\n          && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {errorMessage}\n            </p>\n          )}\n\n          {modifiedPeople.length === 0\n            ? (\n              isLoading || (!errorMessage && <NoPeople />)\n            )\n            : (\n              <PeopleTable\n                people={modifiedPeople}\n                selectedPerson={slug}\n              />\n            )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <div data-cy=\"app\">\n    <main className=\"section\">\n      <div className=\"container\">\n\n        <h1 className=\"title\">Page not found</h1>\n\n      </div>\n    </main>\n  </div>\n);\n","import {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport './App.scss';\n\nimport { Navbar } from './components/Navbar/Navbar';\n\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"*\" element={<NotFoundPage />} />\n\n            <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"/\" element={<HomePage />} />\n\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":slug\" element={<PeoplePage />} />\n            </Route>\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}